// src/api/eventos/eventos.service.ts
import { Injectable, NotFoundException } from '@nestjs/common';
import { CreateEventoDto } from './dto/create-evento.dto';
import { UpdateEventoDto } from './dto/update-evento.dto';
import { PrismaService } from '../../prisma/prisma.service';

@Injectable()
export class EventosService {
  constructor(private prisma: PrismaService) {}

  async create(createEventoDto: CreateEventoDto) {
    // Validar si los lugaresIds existen antes de crear las relaciones
    if (createEventoDto.lugaresIds && createEventoDto.lugaresIds.length > 0) {
      for (const lugarId of createEventoDto.lugaresIds) {
        const lugarExists = await this.prisma.lugaresTuristicos.findUnique({
          where: { id: lugarId },
        });
        if (!lugarExists) {
          throw new NotFoundException(
            `LugarTuristico con ID ${lugarId} no encontrado`,
          );
        }
      }
    }

    return this.prisma.evento.create({
      data: {
        ...createEventoDto,
        // Eliminar lugaresIds como argumento independiente
        lugares: {
          create:
            createEventoDto.lugaresIds?.map((id) => ({
              lugarTuristico: { connect: { id } },
            })) || [],
        },
      },
      include: { lugares: { include: { lugarTuristico: true } } },
    });
  }

  // Obtener todos los eventos
  async findAll() {
    return this.prisma.evento.findMany({
      include: { lugares: { include: { lugarTuristico: true } } },
    });
  }

  // Obtener un evento por ID
  async findOne(id: string) {
    const evento = await this.prisma.evento.findUnique({
      where: { idEvento: id },
      include: { lugares: { include: { lugarTuristico: true } } },
    });
    if (!evento) {
      throw new NotFoundException(`Evento con ID ${id} no encontrado`);
    }
    return evento;
  }

  // Actualizar un evento
  async update(id: string, updateEventoDto: UpdateEventoDto) {
    await this.findOne(id);

    // Si se proporcionan nuevos lugaresIds, actualizamos las relaciones
    if (updateEventoDto.lugaresIds) {
      // Validar que los lugares existan
      for (const lugarId of updateEventoDto.lugaresIds) {
        const lugarExists = await this.prisma.lugaresTuristicos.findUnique({
          where: { id: lugarId },
        });
        if (!lugarExists) {
          throw new NotFoundException(
            `LugarTuristico con ID ${lugarId} no encontrado`,
          );
        }
      }

      // Eliminar las relaciones existentes
      await this.prisma.eventoRel.deleteMany({
        where: { eventoId: id },
      });

      // Crear nuevas relaciones
      return this.prisma.evento.update({
        where: { idEvento: id },
        data: {
          ...updateEventoDto,
          lugares: {
            create: updateEventoDto.lugaresIds.map((lugarId) => ({
              lugarTuristico: { connect: { id: lugarId } },
            })),
          },
        },
        include: { lugares: { include: { lugarTuristico: true } } },
      });
    }

    // Si no se proporcionan lugaresIds, solo actualizamos los dem√°s campos
    return this.prisma.evento.update({
      where: { idEvento: id },
      data: {
        ...updateEventoDto,
      },
      include: { lugares: { include: { lugarTuristico: true } } },
    });
  }

  // Eliminar un evento
  async remove(id: string) {
    await this.findOne(id);
    return this.prisma.evento.delete({ where: { idEvento: id } });
  }
}
