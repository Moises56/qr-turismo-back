// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model LugaresTuristicos {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  key            String       @unique
  nombre         String?
  ubicacion      String?
  latitud        String?
  longitud       String?
  descripcion    String?
  dias           String?
  horarioEntrada String?
  horarioSalida  String?
  historia       String?
  baner          String?
  locales        LocalRel[]
  eventos        EventoRel[]
  galeria        ImageItem[]
  attractions    Attraction[]
  email          String?
  urlWeb         String?
  urlWhatsapp    String?
  urlTiktok      String?
  urlInstagram   String?
  urlFacebook    String?
  urlX           String?
  rutas          RutaRel[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model RutasTuristicas {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  nombre     String
  lugares    LugarRuta[] @relation("RutaLugares")
  lugaresRel RutaRel[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model LugarRuta {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  nombre      String
  lat         Float
  lng         Float
  description String?
  coverImage  String?
  gallery     String[]
  rutaId      String          @db.ObjectId
  ruta        RutasTuristicas @relation("RutaLugares", fields: [rutaId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model RutaRel {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  ruta             RutasTuristicas    @relation(fields: [rutaId], references: [id])
  rutaId           String             @db.ObjectId
  lugarTuristico   LugaresTuristicos? @relation(fields: [lugarTuristicoId], references: [id])
  lugarTuristicoId String?            @db.ObjectId
  orden            Int?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@index([rutaId])
  @@index([lugarTuristicoId])
}

model ImageItem {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  url         String
  name        String
  description String?
  lugarId     String
  lugar       LugaresTuristicos @relation(fields: [lugarId], references: [id])
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Local {
  idLocal      String     @id @default(auto()) @map("_id") @db.ObjectId
  nombre       String?
  descripcion  String?
  horario      Json?
  telefono     String?
  direccion    String?
  banerLocal   String?
  email        String?
  latitud      String?
  longitud     String?
  urlWeb       String?
  urlWhatsapp  String?
  urlTiktok    String?
  urlInstagram String?
  urlFacebook  String?
  urlX         String?
  tipoLocal    TipoLocal  @relation(fields: [tipoLocalId], references: [id])
  tipoLocalId  String     @db.ObjectId
  lugares      LocalRel[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model TipoLocal {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  nombreTipo        String?
  icoTipo           String?
  descripcion       String?
  locales           Local[]
  suscripcionLocal  SuscripcionLocal[]
  updatedAt         DateTime           @updatedAt
  createdAt         DateTime           @default(now())

  @@index([descripcion])
}

model Evento {
  idEvento          String        @id @default(auto()) @map("_id") @db.ObjectId
  nombreEvento      String?
  descripcionEvento String?
  fechaEvento       DateTime?
  tipoEvento        String?
  email             String?
  organizador       String?
  invitados         String?
  banerEvento       String?
  direccionEvento   String?
  latitud           String?
  longitud          String?
  lugares           EventoRel[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  Suscripcion       Suscripcion[]
}

model LocalRel {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  lugarTuristico   LugaresTuristicos @relation(fields: [lugarTuristicoId], references: [id])
  lugarTuristicoId String            @db.ObjectId
  local            Local?            @relation(fields: [localId], references: [idLocal])
  localId          String?           @db.ObjectId
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([lugarTuristicoId])
  @@index([localId])
}

model EventoRel {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  lugarTuristico   LugaresTuristicos @relation(fields: [lugarTuristicoId], references: [id])
  lugarTuristicoId String            @db.ObjectId
  evento           Evento            @relation(fields: [eventoId], references: [idEvento])
  eventoId         String            @db.ObjectId
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([lugarTuristicoId])
  @@index([eventoId])
}

model Suscripcion {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName    String?
  lastName     String?
  email        String?
  phone        String?
  artisticName String?
  dni          String?
  artistType   String?
  lugarEvento  String?
  address      String?
  eventDate    DateTime?
  eventTime    String?
  banerEvent   String?
  latitud      String?
  longitud     String?
  urlWeb       String?
  urlWhatsapp  String?
  urlTiktok    String?
  urlInstagram String?
  urlFacebook  String?
  urlX         String?
  status       String?   @default("pending") // Nuevo campo: pending, approved, rejected
  eventoId     String?   @db.ObjectId // Relación con Evento
  evento       Evento?   @relation(fields: [eventoId], references: [idEvento])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Attraction {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  nombre        String?
  descripcion   String?
  imgAtractions String?
  lugarId       String?            @db.ObjectId
  lugar         LugaresTuristicos? @relation(fields: [lugarId], references: [id])
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  nombre    String
  email     String   @unique
  password  String
  rol       String   @default("usuario")
  empleado  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  logs      Log[]
}

model Log {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?   @db.ObjectId
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

model SuscripcionLocal {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  nombreLocal        String?
  tipoLocal          String?   // comida, viajes, bar, etc.
  latitud            String?
  longitud           String?
  direccion          String?
  rtnDni             String?   // RTN (14 dígitos) o DNI (13 dígitos)
  permisoOperacion   String?   // Podría ser un ID o referencia al documento
  telefonoLocal      String?
  nombrePropietario  String?
  telefonoPropietario String?
  email              String?
  urlWeb             String?
  urlWhatsapp        String?
  urlTiktok          String?
  urlInstagram       String?
  urlFacebook        String?
  urlX               String?
  status             String?   @default("pending") // pending, approved, rejected
  tipoLocalId        String?   @db.ObjectId // Para relacionar con el modelo TipoLocal si es necesario
  tipoLocalRef       TipoLocal? @relation(fields: [tipoLocalId], references: [id])
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@index([tipoLocalId])
}
